+++++++ Part 1 +++++++

Do You Know?
1. The bug does not always move to a new location - if it reaches an obstacle (i.e. rock) it has to turn first before it can move again.
2. The bug moves forward, if possible - otherwise, it performs a clockwise turn until it can move forward again.
3. The bug turns clockwise 45 degrees if it does not move.
4. The bug leaves behind a flower of its color when it moves.
5. When the bug is at the edge of the grid it keeps following the edge of the grid, turning clockwise if necessary to continue moving.
6. If a rock is directly in front of a bug, the bug turns clockwise 45 degrees until it finds an unobstructed path in which to move.
7. A flower does not move.
8. The flower's behavior consists of slowly fading from the color of the bug that created it to black.
9. A rock has no noticeable behavior. It neither moves nor changes color.
10. Only one actor can be in the same location in the grid.

Exercises
1. 45 degrees: northeast
   90 degrees: east
   135 degrees: southeast
   180 degrees: south
   225 degrees: southwest
   270 degrees: west
   315 degrees: northwest
   360 degrees: north
2. The bug can be moved any distance in any direction (as long as the coordinates provided are inside the grid). If coordinates that are outside of the grid are provided, an IllegalArgumentException is thrown.
3. The setColor method (inherited from the actor class) is used to change the color of an actor.
4. The bug disappeared - since only one actor can inhabit a given space in the grid, the rock overwrote the bug.

+++++++ End of Part 1 +++++++

=================================================

+++++++ Part 2 +++++++

Do You Know?
1. The sideLength instance variable keeps track of how wide / long the square traced by the bug is.
2. The steps instance variable keeps track of how many spaces the bug has moved since the last time it turned a corner.
3. The turn method is called twice when steps becomes equal to sideLength because one call of the turn method only turns the bug 45 degrees. Two calls of the turn method, however, turn the bug 90 degrees clockwise, which is the angle necessary for the bug to continue moving in the path of the square.
4. The move method can be called because it is inherited from the Bug class, even though code for it does not appear in the BoxBug class.
5. The size of the BoxBug's square pattern will always be the same, because after sideLength is defined in the BoxBug constructor, there is no method that changes or can change sideLength.
6. The path a BoxBug travels can change, provided that somewhere along its path it runs into an obstacle (i.e. another bug). If this occurs, the bug will find another suitable square path of the same size and will move in that path indefinitely (or until it runs into another obstacle).
7. The value of steps will be zero right after the BoxBug reaches a corner and turns the corner but doesn't yet move into the next position.

Exercises
1. (See CircleBug class for code) Instead of turning 90 degrees clockwise at each corner, it turns only 45 degrees. Thus, instead of following a square path, the CircleBug follows a roughly circular path, or, more accurately, follows an octagon-shaped path (8 sides, 135 degree angles instead of 90 degree angles).
2. (See SpiralBug class for code)
3. (See ZBug class for code)
4. 